name: Elite MAX â€“ Build & Deploy

on:
  push:
    branches: [ services/max-squad-bootstrap ]
  workflow_dispatch: {}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      REGION: us-east1
      PROJECT_ID: infinity-x-one-swarm-system
      REPO: us-east1-docker.pkg.dev/infinity-x-one-swarm-system/services
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOYER_SA }}
          project_id: ${{ env.PROJECT_ID }}
          create_credentials_file: true

      - uses: google-github-actions/setup-gcloud@v2

      - name: Configure Artifact Registry Docker auth
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev -q

      - name: Build & push images (matrix-like)
        run: |
          set -euo pipefail
          declare -a SVC=( api-gateway )
          for s in "${SVC[@]}"; do
            IMG="${REPO}/${s}:$GITHUB_SHA"
            docker build -t "${IMG}" services/${s}
            docker push "${IMG}"
          done

      - name: Deploy Cloud Run services
        run: |
          set -euo pipefail
          declare -a SVC=( api-gateway )
          for s in "${SVC[@]}"; do
            IMG="${REPO}/${s}:$GITHUB_SHA"
            gcloud run deploy "${s}" \n              --project "${PROJECT_ID}" \n              --region "${REGION}" \n              --platform managed \n              --image "${IMG}" \n              --allow-unauthenticated=false \n              --ingress internal-and-cloud-load-balancing \n              --port 8080 \n              --cpu 1 --memory 512Mi \n              --min-instances 1 --max-instances 10 \n              --set-env-vars APP_NAME=${s} \n              --service-account ${{ secrets.GCP_RUNTIME_SA }}
          done

      - name: Create/Update warmers (OIDC)
        run: |
          set -euo pipefail
          declare -a SVC=( api-gateway )
          for s in "${SVC[@]}"; do
            URL=$(gcloud run services describe "${s}" --region $REGION --format='value(status.url)')
            gcloud scheduler jobs create http warm-${s} \n              --location $REGION \n              --schedule "*/5 * * * *" \n              --http-method GET \n              --uri "${URL}/health" \n              --oidc-service-account-email ${{ secrets.GCP_SCHEDULER_SA }} \n              --oidc-token-audience "${URL}" \n              --attempt-deadline 180s || \n            gcloud scheduler jobs update http warm-${s} \n              --location $REGION \n              --schedule "*/5 * * * *" \n              --http-method GET \n              --uri "${URL}/health" \n              --oidc-service-account-email ${{ secrets.GCP_SCHEDULER_SA }} \n              --oidc-token-audience "${URL}" \n              --attempt-deadline 180s
          done

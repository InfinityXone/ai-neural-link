name: Sovereign Deploy (Elite Agents)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write   # required for OIDC
  contents: read    # allow checkout
  actions: read

env:
  PROJECT_ID: ${{ vars.CIQ_PROJECT_ID }}
  REGION: ${{ vars.CIQ_REGION }}
  REG_HOST: ${{ vars.CIQ_REGION }}-docker.pkg.dev
  AR_NAME: ai-link

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth (OIDC)
        uses: google-github-actions/auth@v2
        with:
      workload_identity_provider: ${{ vars.CIQ_WIF_PROVIDER }}
      audience: https://token.actions.githubusercontent.com
      service_account: gha-deployer@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Echo context (sanity)
        run: |
          set -euxo pipefail
          gcloud --version
          echo "PROJECT_ID=${PROJECT_ID}"
          echo "REGION=${REGION}"
          echo "REG_HOST=${REG_HOST}"
          echo "AR_NAME=${AR_NAME}"
          gcloud config set project "${PROJECT_ID}"
          gcloud config set run/region "${REGION}"

      - name: Ensure Artifact Registry
        run: |
          set -euo pipefail
          gcloud artifacts repositories describe "${AR_NAME}" --location "${REGION}" >/dev/null 2>&1 || \
          gcloud artifacts repositories create "${AR_NAME}" --repository-format=DOCKER --location "${REGION}"

      - name: Build & Deploy services/*
        run: |
          set -euo pipefail
          if [ ! -d "services" ]; then
            echo "No services dir; nothing to deploy."
            exit 0
          fi
          for d in services/*; do
            [ -d "$d" ] || continue
            SVC="$(basename "$d")"
            IMG="${REG_HOST}/${PROJECT_ID}/${AR_NAME}/${SVC}:latest"
            echo "==> Build ${SVC}"
            gcloud builds submit "$d" --tag "$IMG" --project "${PROJECT_ID}"
            echo "==> Deploy ${SVC}"
            gcloud run deploy "${SVC}" --image "${IMG}" --region "${REGION}" --project "${PROJECT_ID}" \
              --service-account "run-ciq@${PROJECT_ID}.iam.gserviceaccount.com" \
              --port 8080 --min-instances 1 --max-instances 2 --no-allow-unauthenticated --quiet
            gcloud run services update-traffic "${SVC}" --to-latest --region "${REGION}" --project "${PROJECT_ID}" --quiet || true
          done

      - name: Autopilot Job (build + schedule)
        run: |
          set -euo pipefail
          AP_IMG="${REG_HOST}/${PROJECT_ID}/${AR_NAME}/autopilot-job:latest"
          if [ -d "ops/autopilot" ]; then
            gcloud builds submit ops/autopilot --tag "${AP_IMG}" --project "${PROJECT_ID}"
            if gcloud beta run jobs describe ciq-autopilot --region "${REGION}" --project "${PROJECT_ID}" >/dev/null 2>&1; then
              gcloud beta run jobs update ciq-autopilot --image "${AP_IMG}" \
                --service-account "run-ciq@${PROJECT_ID}.iam.gserviceaccount.com" \
                --region "${REGION}" --project "${PROJECT_ID}" --quiet
            else
              gcloud beta run jobs create ciq-autopilot --image "${AP_IMG}" \
                --service-account "run-ciq@${PROJECT_ID}.iam.gserviceaccount.com" \
                --region "${REGION}" --project "${PROJECT_ID}" --quiet
            fi
            if gcloud scheduler jobs describe ciq-autopilot --location "${REGION}" >/dev/null 2>&1; then
              gcloud scheduler jobs update http ciq-autopilot --location "${REGION}" \
                --http-method POST \
                --uri "https://run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${PROJECT_ID}/jobs/ciq-autopilot:run" \
                --oauth-service-account-email "scheduler-autopilot@${PROJECT_ID}.iam.gserviceaccount.com" \
                --schedule "*/10 * * * *" --attempt-deadline "60s" --quiet
            else
              gcloud scheduler jobs create http ciq-autopilot --location "${REGION}" \
                --http-method POST \
                --uri "https://run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${PROJECT_ID}/jobs/ciq-autopilot:run" \
                --oauth-service-account-email "scheduler-autopilot@${PROJECT_ID}.iam.gserviceaccount.com" \
                --schedule "*/10 * * * *" --attempt-deadline "60s" --quiet
            fi
          else
            echo "No ops/autopilot dir; skipping job."
          fi

      - name: Warm /health for all services
        run: |
          set -euo pipefail
          for s in $(gcloud run services list --region "${REGION}" --project "${PROJECT_ID}" --format='value(metadata.name)'); do
            url="$(gcloud run services describe "$s" --region "${REGION}" --project "${PROJECT_ID}" --format='value(status.url)' || true)"
            [ -n "$url" ] || continue
            if gcloud scheduler jobs describe "warm-${s}" --location "${REGION}" >/dev/null 2>&1; then
              gcloud scheduler jobs update http "warm-${s}" --location "${REGION}" --http-method GET --uri "${url}/health" \
                --oidc-service-account-email "scheduler-autopilot@${PROJECT_ID}.iam.gserviceaccount.com" \
                --oidc-token-audience "${url}" --schedule "*/5 * * * *" --max-retry-attempts 3 --attempt-deadline "30s"
            else
              gcloud scheduler jobs create http "warm-${s}" --location "${REGION}" --http-method GET --uri "${url}/health" \
                --oidc-service-account-email "scheduler-autopilot@${PROJECT_ID}.iam.gserviceaccount.com" \
                --oidc-token-audience "${url}" --schedule "*/5 * * * *" --max-retry-attempts 3 --attempt-deadline "30s"
            fi
          done

name: CI/CD - Build & Deploy (Cloud Run)

on:
  push:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/ci-cd.yml'
  workflow_dispatch: {}

permissions:
  id-token: write   # OIDC for GCP
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: infinity-x-one-swarm-system
      REGION: us-east1
      REGISTRY: us-east1-docker.pkg.dev/infinity-x-one-swarm-system/services
    steps:
      - uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'beta'

      - name: Auth to GCP via WIF
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: gha-deployer@infinity-x-one-swarm-system.iam.gserviceaccount.com

      - name: Configure Docker auth
        run: |
          gcloud auth configure-docker us-east1-docker.pkg.dev -q

      - name: Build & push images
        run: |
          set -euo pipefail
          for svc in services/*; do
            [ -d "$svc" ] || continue
            name=$(basename "$svc")
            if [ -f "$svc/Dockerfile" ]; then
              tag=${REGISTRY}/${name}:$GITHUB_SHA
              echo "::group::Build $name"
              docker build -t $tag $svc
              docker push $tag
              echo "::endgroup::"
            fi
          done

      - name: Deploy core services (private)
        run: |
          set -euo pipefail
          deploy(){
            local name=$1;
            local url_flag=${2:-}
            local img="${REGISTRY}/${name}:$GITHUB_SHA"
            if gcloud run services describe $name --region $REGION >/dev/null 2>&1; then
              echo updating $name
            else
              echo creating $name
            fi
            gcloud run deploy $name \
              --image $img \
              --region $REGION \
              --project $PROJECT_ID \
              --no-allow-unauthenticated \
              --ingress internal-and-cloud-load-balancing \
              --min-instances=0 --max-instances=10 \
              --cpu=1 --memory=512Mi \
              --set-env-vars ENV=prod || exit 1
          }
          deploy ai-gateway
          deploy orchestrator

      - name: Warmers (ensure)
        run: |
          set -euo pipefail
          ensure_job(){
            local job=$1; local url=$2;
            if gcloud scheduler jobs describe $job --location $REGION >/dev/null 2>&1; then
              echo job exists: $job
              gcloud scheduler jobs update http $job \
                --location $REGION \
                --schedule "*/5 * * * *" \
                --uri "$url" \
                --http-method GET \
                --oidc-service-account-email scheduler-autopilot@${PROJECT_ID}.iam.gserviceaccount.com \
                --oidc-token-audience "$url" || true
            else
              gcloud scheduler jobs create http $job \
                --location $REGION \
                --schedule "*/5 * * * *" \
                --uri "$url" \
                --http-method GET \
                --oidc-service-account-email scheduler-autopilot@${PROJECT_ID}.iam.gserviceaccount.com \
                --oidc-token-audience "$url" || true
            fi
          }
          gw=$(gcloud run services describe ai-gateway --region $REGION --format='value(status.url)')
          oc=$(gcloud run services describe orchestrator --region $REGION --format='value(status.url)')
          [ -n "$gw" ] && ensure_job warm-ai-gateway "$gw/health"
          [ -n "$oc" ] && ensure_job warm-orchestrator "$oc/health"

      - name: Summary
        run: |
          echo "Deployed ai-gateway & orchestrator to Cloud Run (private)."
